{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutStart } from './user.action';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/filrebase.util';\nexport function* getSnapShotFromFireBase(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapShoot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapShoot.id,\n      ...userSnapShoot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuth() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromFireBase(userAuth);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromFireBase(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromFireBase(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail); // 这个地方听action, 谁叫了这个type就call this saga\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* checkUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuth);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuth)]);\n}","map":{"version":3,"sources":["/Users/lihaohang/github/react-practice-app/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutStart","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapShotFromFireBase","userAuth","userRef","userSnapShoot","get","id","data","error","isUserAuth","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onSignOutStart","SIGN_OUT_START","signOut","checkUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SACEA,UADF,EACcC,GADd,EACmBC,GADnB,EACwBC,IADxB,QAEO,oBAFP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,aADF,EACiBC,aADjB,EACgCC,YADhC,QAEO,eAFP;AAGA,SACEC,IADF,EACQC,cADR,EACwBC,yBADxB,EACmDC,cADnD,QAEO,+BAFP;AAIA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AACjD,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACO,yBAAD,EAA4BG,QAA5B,CAA1B;AACA,UAAME,aAAa,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA5B;AACA,UAAMf,GAAG,CAACI,aAAa,CAAC;AAAEY,MAAAA,EAAE,EAAEF,aAAa,CAACE,EAApB;AAAwB,SAAGF,aAAa,CAACG,IAAd;AAA3B,KAAD,CAAd,CAAT;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACD;AACF;AACD,OAAO,UAAUC,UAAV,GAAuB;AAC5B,MAAI;AACF,UAAMP,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAI,CAACE,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACD,GAJD,CAIE,OAAOM,KAAP,EAAc;AACdlB,IAAAA,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAH;AACD;AACF;AACD,OAAO,UAAUE,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAvB;AACA,UAAMG,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOH,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUK,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMf,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOH,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUU,mBAAV,GAAgC;AACrC,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,oBAAjB,EAAuCT,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUU,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,mBAAjB,EAAsCR,eAAtC,CAAhB,CADoC,CACmC;AACxE;AAED,OAAO,UAAUS,cAAV,GAA2B;AAChC,QAAMjC,UAAU,CAACI,eAAe,CAAC8B,cAAjB,EAAiCC,OAAjC,CAAhB;AACD;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,QAAMpC,UAAU,CAACI,eAAe,CAACiC,kBAAjB,EAAqCjB,UAArC,CAAhB;AACD;AACD,OAAO,UAAUkB,SAAV,GAAsB;AAC3B,QAAMpC,GAAG,CAAC,CAACC,IAAI,CAAC0B,mBAAD,CAAL,EAA4B1B,IAAI,CAAC4B,kBAAD,CAAhC,EAAsD5B,IAAI,CAACiB,UAAD,CAA1D,CAAD,CAAT;AACD","sourcesContent":["import {\n  takeLatest, put, all, call,\n} from 'redux-saga/effects';\n\n\nimport UserActionTypes from './user.types';\nimport {\n  signInSuccess, signInFailure, signOutStart,\n} from './user.action';\nimport {\n  auth, googleProvider, createUserProfileDocument, getCurrentUser,\n} from '../../firebase/filrebase.util';\n\nexport function* getSnapShotFromFireBase(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapShoot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapShoot.id, ...userSnapShoot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuth() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromFireBase(userAuth);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromFireBase(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromFireBase(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);// 这个地方听action, 谁叫了这个type就call this saga\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\nexport function* checkUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuth);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuth)]);\n}\n"]},"metadata":{},"sourceType":"module"}