{"ast":null,"code":"/**\n * this function check if the item is already in the cart list, if yes, simply add\n * quanlity instead of add a identical item into the list. If item is not in the list\n * add into the list and add quality property\n *\n * @param {arry} cartItems, existing array of item that is already in carItem list\n * @param {object} cartItemToAdd new item that user wants to add\n * @returns {array} a new array that has updated quantity of item\n */\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n  console.log('I am here');\n\n  if (existingCartItem) {\n    const result = cartItems.map(cartItem => cartItem.id === cartItemToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n    console.log('I am here2', result);\n    return ['hiahia'];\n  }\n\n  return [...cartItems, { ...cartItemToAdd,\n    quantity: 1\n  }];\n};\nexport default addItemToCart;","map":{"version":3,"sources":["/Users/lihaohang/github/react-practice-app/src/redux/cart/cart.util.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","console","log","result","map","quantity"],"mappings":"AAAA;;;;;;;;;AASA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACzD,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAgBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA3D,CAAzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,MAAIL,gBAAJ,EAAsB;AACpB,UAAMM,MAAM,GAAIR,SAAS,CAACS,GAAV,CAAeL,QAAD,IAAeA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,GACzC,EAAE,GAAGD,QAAL;AAAeM,MAAAA,QAAQ,EAAEN,QAAQ,CAACM,QAAT,GAAoB;AAA7C,KADyC,GACUN,QADvC,CAAhB;AAGAE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,MAA1B;AACA,WAAO,CAAC,QAAD,CAAP;AACD;;AACD,SAAO,CAAC,GAAGR,SAAJ,EAAe,EAAE,GAAGC,aAAL;AAAoBS,IAAAA,QAAQ,EAAE;AAA9B,GAAf,CAAP;AACD,CAXM;AAaP,eAAeX,aAAf","sourcesContent":["/**\n * this function check if the item is already in the cart list, if yes, simply add\n * quanlity instead of add a identical item into the list. If item is not in the list\n * add into the list and add quality property\n *\n * @param {arry} cartItems, existing array of item that is already in carItem list\n * @param {object} cartItemToAdd new item that user wants to add\n * @returns {array} a new array that has updated quantity of item\n */\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingCartItem = cartItems.find((cartItem) => cartItem.id === cartItemToAdd.id);\n  console.log('I am here');\n  if (existingCartItem) {\n    const result = (cartItems.map((cartItem) => (cartItem.id === cartItemToAdd.id\n      ? { ...cartItem, quantity: cartItem.quantity + 1 } : cartItem))\n    );\n    console.log('I am here2', result);\n    return ['hiahia'];\n  }\n  return [...cartItems, { ...cartItemToAdd, quantity: 1 }];\n};\n\nexport default addItemToCart;\n"]},"metadata":{},"sourceType":"module"}