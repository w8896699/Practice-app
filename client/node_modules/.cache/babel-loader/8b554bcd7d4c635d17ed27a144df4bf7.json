{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth'; // Firestore is a NoSQL, document-oriented database unlike a SQL database, there are no tables or row, store data in document.\n\nrequire('dotenv').config({\n  path: '.env.local'\n});\n\nconsole.log('hiahia', process.env);\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API,\n  authDomain: 'react-practice-d680d.firebaseapp.com',\n  databaseURL: 'https://react-practice-d680d.firebaseio.com',\n  projectId: 'react-practice-d680d',\n  storageBucket: 'react-practice-d680d.appspot.com',\n  messagingSenderId: '182342121380',\n  appId: '1:182342121380:web:408b30d2b778ff02ee7331',\n  measurementId: 'G-MZTHS2MDPW'\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const createUserProfileDocument = async (userAuth, otherData) => {\n  // 每一次用户登陆才会跳进这个方法, 在app.js里面 ps,明明没有设置useEffect触发条件却能触发,,不太懂\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // query doc就 得到/进入 了这个用户的reference\n\n  const userSnapShot = await userRef.get(); // 用上面的到的referenct去数据库里提取有关信息存为 snapshot\n  //   console.log('userSnapShot,', userSnapShot);\n\n  if (!userSnapShot.exists) {\n    // if this user never register b4, which will not exist in our firebase db, then exist is false\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createDate = new Date(); // console.log(displayName, email);\n\n    try {\n      // create a new entry in our firebase database (create new user)\n      await userRef.set({\n        // 这里是把google firebase sign in 的信息set into firebase database storage\n        displayName,\n        email,\n        createDate,\n        ...otherData\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectToAdd) => {\n  // this is just for one time use to add collection into firebase\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch(); // Batch => bcs we can only do set call once at a time, so if one call fail, all will fail\n\n  objectToAdd.forEach(element => {\n    const newDocRef = collectionRef.doc(); // tell firebase give/create for me new reference in this collection, create ur own key\n    // originaly we will call this like : newDocRef.set(element), but reason is at 上面三行\n\n    batch.set(newDocRef, element);\n  });\n  await batch.commit(); // this will submit all batch request at one, and will return a promise, once complet it will return a void value\n};\nexport const convertCollectionsSnapShotToMap = collection => {\n  // get info from snapshot of a collection of firebase\n  // console.log('collection', collection);\n  const transformedCollection = collection.docs.map(element => {\n    const {\n      title,\n      items\n    } = element.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      // comes with js, pass into string, give back string that url can read, use title as route name as well\n      id: element.id,\n      title,\n      items\n    };\n  }); // console.log('trnasformedCollection,', transformedCollection);\n  // return transformedCollection;\n\n  return transformedCollection.reduce((accumulator, element) => {\n    // 这个只是把它变好看一点,把title弄成object的key\n    accumulator[element.title.toLowerCase()] = element;\n    return accumulator;\n  }, {}); // console.log('wtf', test);\n};\nexport const getCurrentUser = () => new Promise((resolve, reject) => {\n  const unsubscribe = auth.onAuthStateChanged(userAuth => {\n    // this will go check if user ever sign out\n    unsubscribe();\n    resolve(userAuth);\n  }, reject);\n});\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/lihaohang/github/react-practice-app/client/src/firebase/filrebase.util.js"],"names":["firebase","require","config","path","console","log","process","env","apiKey","REACT_APP_FIREBASE_API","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","otherData","userRef","doc","uid","userSnapShot","get","exists","displayName","email","createDate","Date","set","error","message","addCollectionAndDocuments","collectionKey","objectToAdd","collectionRef","collection","batch","forEach","element","newDocRef","commit","convertCollectionsSnapShotToMap","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\n// Firestore is a NoSQL, document-oriented database unlike a SQL database, there are no tables or row, store data in document.\nrequire('dotenv').config({path: '.env.local'});\n\nconsole.log('hiahia',process.env)\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API,\n  authDomain: 'react-practice-d680d.firebaseapp.com',\n  databaseURL: 'https://react-practice-d680d.firebaseio.com',\n  projectId: 'react-practice-d680d',\n  storageBucket: 'react-practice-d680d.appspot.com',\n  messagingSenderId: '182342121380',\n  appId: '1:182342121380:web:408b30d2b778ff02ee7331',\n  measurementId: 'G-MZTHS2MDPW',\n};\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const createUserProfileDocument = async (userAuth, otherData) => {\n  // 每一次用户登陆才会跳进这个方法, 在app.js里面 ps,明明没有设置useEffect触发条件却能触发,,不太懂\n\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // query doc就 得到/进入 了这个用户的reference\n\n\n  const userSnapShot = (await userRef.get()); // 用上面的到的referenct去数据库里提取有关信息存为 snapshot\n  //   console.log('userSnapShot,', userSnapShot);\n  if (!userSnapShot.exists) { // if this user never register b4, which will not exist in our firebase db, then exist is false\n    const { displayName, email } = userAuth;\n    const createDate = new Date();\n    // console.log(displayName, email);\n    try { // create a new entry in our firebase database (create new user)\n      await userRef.set({ // 这里是把google firebase sign in 的信息set into firebase database storage\n        displayName,\n        email,\n        createDate,\n        ...otherData,\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectToAdd) => { // this is just for one time use to add collection into firebase\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch(); // Batch => bcs we can only do set call once at a time, so if one call fail, all will fail\n\n  objectToAdd.forEach((element) => {\n    const newDocRef = collectionRef.doc(); // tell firebase give/create for me new reference in this collection, create ur own key\n    // originaly we will call this like : newDocRef.set(element), but reason is at 上面三行\n    batch.set(newDocRef, element);\n  });\n  await batch.commit(); // this will submit all batch request at one, and will return a promise, once complet it will return a void value\n};\n\n\nexport const convertCollectionsSnapShotToMap = (collection) => { // get info from snapshot of a collection of firebase\n  // console.log('collection', collection);\n  const transformedCollection = collection.docs.map((element) => {\n    const { title, items } = element.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()), // comes with js, pass into string, give back string that url can read, use title as route name as well\n      id: element.id,\n      title,\n      items,\n    };\n  });\n\n  // console.log('trnasformedCollection,', transformedCollection);\n  // return transformedCollection;\n  return transformedCollection.reduce((accumulator, element) => { // 这个只是把它变好看一点,把title弄成object的key\n    accumulator[element.title.toLowerCase()] = element;\n    return accumulator;\n  }, {});\n  // console.log('wtf', test);\n};\nexport const getCurrentUser = () => new Promise((resolve, reject) => {\n  const unsubscribe = auth.onAuthStateChanged((userAuth) => { // this will go check if user ever sign out\n    unsubscribe();\n    resolve(userAuth);\n  }, reject);\n});\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n\nexport const signInWithGoogle = () => (\n  auth.signInWithPopup(googleProvider)\n);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}