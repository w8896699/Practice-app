{"ast":null,"code":"var _jsxFileName = \"/Users/lihaohang/github/react-practice-app/src/pages/shop/shop.component.js\";\n\n/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport { Route } from 'react-router-dom'; // import { render } from 'node-sass';\n\nimport { connect } from 'react-redux';\nimport CollectionPage from '../collection/collection.page';\nimport PreviewofCollection from '../../components/collection-overview/collection-overview.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/filrebase.util';\nimport * as shopAction from '../../redux/shop/shop.actions';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionPage);\nconst PreviewofCollectionWithSpinner = WithSpinner(PreviewofCollection);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections'); // 从firestore里把整个collection的ref拿出来,\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async (Snapshot) => {\n    //   const collectionMap = convertCollectionsSnapShotToMap(Snapshot);\n    //   updateCollections(collectionMap); // 这里是async, 需要等待的,接到信息了update到redux里头去\n    //   this.setState({ loading: false });\n    // }); //= > this means whenever collectionSnapshot got update, or run first time this will send collection data arry to us\n\n    collectionRef.get().then(Snapshot => {\n      const collectionMap = convertCollectionsSnapShotToMap(Snapshot);\n      updateCollections(collectionMap); // 这里是async, 需要等待的,接到信息了update到redux里头去\n\n      this.setState({\n        loading: false\n      });\n    }); //= > this means whenever coll\n  }\n\n  render() {\n    const {\n      match\n    } = this.props; // 这里的match是上一级router传下来的\n\n    const {\n      loading\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => React.createElement(PreviewofCollectionWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionID`,\n      render: props => React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionMap => dispatch(shopAction.updateCollections(collectionMap)) // conclusion, get data from database, and put in redux\n\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/lihaohang/github/react-practice-app/src/pages/shop/shop.component.js"],"names":["React","Route","connect","CollectionPage","PreviewofCollection","WithSpinner","firestore","convertCollectionsSnapShotToMap","shopAction","CollectionOverviewWithSpinner","PreviewofCollectionWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","updateCollections","props","collectionRef","collection","get","then","Snapshot","collectionMap","setState","render","match","path","mapDispatchToProps","dispatch"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,mBAAP,MAAgC,oEAAhC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,OAAO,KAAKC,UAAZ,MAA4B,+BAA5B;AAGA,MAAMC,6BAA6B,GAAGJ,WAAW,CAACF,cAAD,CAAjD;AACA,MAAMO,8BAA8B,GAAGL,WAAW,CAACD,mBAAD,CAAlD;;AACA,MAAMO,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACvCC,KADuC,GAChC;AACLC,MAAAA,OAAO,EAAE;AADJ,KADgC;AAAA,SAKvCC,uBALuC,GAKb,IALa;AAAA;;AAOvCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAwB,KAAKC,KAAnC;AACA,UAAMC,aAAa,GAAGb,SAAS,CAACc,UAAV,CAAqB,aAArB,CAAtB,CAFkB,CAEyC;AAE3D;AACA;AACA;AACA;AACA;;AACAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAA0BC,QAAD,IAAc;AACrC,YAAMC,aAAa,GAAGjB,+BAA+B,CAACgB,QAAD,CAArD;AACAN,MAAAA,iBAAiB,CAACO,aAAD,CAAjB,CAFqC,CAEH;;AAClC,WAAKC,QAAL,CAAc;AAAEX,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAJD,EATkB,CAad;AACL;;AAEDY,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKT,KAAvB,CADO,CACuB;;AAC9B,UAAM;AAAEJ,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEc,KAAK,CAACC,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGV,KAAD,IAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEJ;AAA3C,SAAwDI,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAES,KAAK,CAACC,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGV,KAAD,IAAW,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAEJ;AAA1C,SAAuDI,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAhCsC;;AAmCvC,MAAMW,kBAAkB,GAAIC,QAAD,KAAe;AACxCb,EAAAA,iBAAiB,EAAGO,aAAD,IAAmBM,QAAQ,CAACtB,UAAU,CAACS,iBAAX,CAA6BO,aAA7B,CAAD,CADN,CACqD;;AADrD,CAAf,CAA3B;;AAGA,eAAetB,OAAO,CAAC,IAAD,EAAO2B,kBAAP,CAAP,CAAkClB,QAAlC,CAAf","sourcesContent":["/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport { Route } from 'react-router-dom';\n// import { render } from 'node-sass';\nimport { connect } from 'react-redux';\nimport CollectionPage from '../collection/collection.page';\nimport PreviewofCollection from '../../components/collection-overview/collection-overview.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/filrebase.util';\nimport * as shopAction from '../../redux/shop/shop.actions';\n\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionPage);\nconst PreviewofCollectionWithSpinner = WithSpinner(PreviewofCollection);\nclass ShopPage extends React.Component {\nstate ={\n  loading: true,\n}\n\nunsubscribeFromSnapshot = null;\n\ncomponentDidMount() {\n  const { updateCollections } = this.props;\n  const collectionRef = firestore.collection('collections'); // 从firestore里把整个collection的ref拿出来,\n\n  // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async (Snapshot) => {\n  //   const collectionMap = convertCollectionsSnapShotToMap(Snapshot);\n  //   updateCollections(collectionMap); // 这里是async, 需要等待的,接到信息了update到redux里头去\n  //   this.setState({ loading: false });\n  // }); //= > this means whenever collectionSnapshot got update, or run first time this will send collection data arry to us\n  collectionRef.get().then((Snapshot) => {\n    const collectionMap = convertCollectionsSnapShotToMap(Snapshot);\n    updateCollections(collectionMap); // 这里是async, 需要等待的,接到信息了update到redux里头去\n    this.setState({ loading: false });\n  }); //= > this means whenever coll\n}\n\nrender() {\n  const { match } = this.props; // 这里的match是上一级router传下来的\n  const { loading } = this.state;\n  return (\n    <div className=\"shop-page\">\n      <Route exact path={`${match.path}`} render={(props) => <PreviewofCollectionWithSpinner isLoading={loading} {...props} />} />\n      <Route path={`${match.path}/:collectionID`} render={(props) => <CollectionOverviewWithSpinner isLoading={loading} {...props} />} />\n    </div>\n  );\n}\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateCollections: (collectionMap) => dispatch(shopAction.updateCollections(collectionMap)), // conclusion, get data from database, and put in redux\n});\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}