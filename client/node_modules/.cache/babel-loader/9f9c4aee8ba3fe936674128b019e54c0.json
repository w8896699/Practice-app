{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport logger from 'redux-logger'; // useful debug middleware\n// import thunk from 'redux-thunk';\n\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root-reducer';\nimport rootSagas from './root-sagas';\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nconsole.log('check', process.env.NODE_ENV);\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); // current we only one midware,\n\nsagaMiddleware.run(rootSagas);\nexport const persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/lihaohang/github/react-practice-app/client/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","createSagaMiddleware","rootReducer","rootSagas","sagaMiddleware","middlewares","console","log","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AACA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAAmC;AACnC;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AAEA,MAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;AACAE,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBC,OAAO,CAACC,GAAR,CAAYC,QAAhC;;AACA,IAAIF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CL,EAAAA,WAAW,CAACM,IAAZ,CAAiBX,MAAjB;AACD;;AAED,OAAO,MAAMY,KAAK,GAAGf,WAAW,CAACK,WAAD,EAAcJ,eAAe,CAAC,GAAGO,WAAJ,CAA7B,CAAzB,C,CAAwE;;AAC/ED,cAAc,CAACS,GAAf,CAAmBV,SAAnB;AACA,OAAO,MAAMW,SAAS,GAAGf,YAAY,CAACa,KAAD,CAA9B;AACP,eAAe;AAAEA,EAAAA,KAAF;AAASE,EAAAA;AAAT,CAAf","sourcesContent":["\nimport { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport logger from 'redux-logger'; // useful debug middleware\n// import thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './root-reducer';\nimport rootSagas from './root-sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\nconsole.log('check',process.env.NODE_ENV )\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));// current we only one midware,\nsagaMiddleware.run(rootSagas);\nexport const persistor = persistStore(store);\nexport default { store, persistor };\n"]},"metadata":{},"sourceType":"module"}