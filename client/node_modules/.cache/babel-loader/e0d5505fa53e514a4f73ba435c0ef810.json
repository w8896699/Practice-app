{"ast":null,"code":"import CartActionTypes from './cart.type';\nimport { addItemToCart, reduceItemQuantity } from './cart.util';\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: [],\n  total: 0\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return { ...state,\n        hidden: !state.hidden\n      };\n\n    case CartActionTypes.ADD_ITEM:\n      return { ...state,\n        cartItems: addItemToCart(state.cartItems, action.payload) // prasing everything we had before in ...state.cartItem, and add new item as action.payload in the end of the array\n\n      };\n\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return { ...state,\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id)\n      };\n\n    case CartActionTypes.REDUCE_ITEM:\n      return { ...state,\n        cartItems: reduceItemQuantity(state.cartItems, action.payload)\n      };\n\n    case CartActionTypes.CLEAR_CART:\n      return { ...state,\n        cartItems: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/lihaohang/github/react-practice-app/client/src/redux/cart/cart.reducer.js"],"names":["CartActionTypes","addItemToCart","reduceItemQuantity","INITIAL_STATE","hidden","cartItems","total","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEM","payload","CLEAR_ITEM_FROM_CART","filter","cartItem","id","REDUCE_ITEM","CLEAR_CART"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,aAA5B;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,aAAlD;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,IADY;AAEpBC,EAAAA,SAAS,EAAE,EAFS;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,eAAe,CAACW,kBAArB;AACE,aAAO,EACL,GAAGH,KADE;AAELJ,QAAAA,MAAM,EAAE,CAACI,KAAK,CAACJ;AAFV,OAAP;;AAIF,SAAKJ,eAAe,CAACY,QAArB;AACE,aAAO,EACL,GAAGJ,KADE;AAELH,QAAAA,SAAS,EAAEJ,aAAa,CAACO,KAAK,CAACH,SAAP,EAAkBI,MAAM,CAACI,OAAzB,CAFnB,CAEsD;;AAFtD,OAAP;;AAIF,SAAKb,eAAe,CAACc,oBAArB;AACE,aAAO,EACL,GAAGN,KADE;AAELH,QAAAA,SAAS,EAAEG,KAAK,CAACH,SAAN,CAAgBU,MAAhB,CACRC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBR,MAAM,CAACI,OAAP,CAAeI,EADpC;AAFN,OAAP;;AAMF,SAAKjB,eAAe,CAACkB,WAArB;AACE,aAAO,EACL,GAAGV,KADE;AAELH,QAAAA,SAAS,EAAEH,kBAAkB,CAACM,KAAK,CAACH,SAAP,EAAkBI,MAAM,CAACI,OAAzB;AAFxB,OAAP;;AAIF,SAAKb,eAAe,CAACmB,UAArB;AACE,aAAO,EACL,GAAGX,KADE;AAELH,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF;AACE,aAAOG,KAAP;AA7BJ;AA+BD,CAhCD;;AAiCA,eAAeD,WAAf","sourcesContent":["import CartActionTypes from './cart.type';\nimport { addItemToCart, reduceItemQuantity } from './cart.util';\n\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: [],\n  total: 0,\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return {\n        ...state,\n        hidden: !state.hidden,\n      };\n    case CartActionTypes.ADD_ITEM:\n      return {\n        ...state,\n        cartItems: addItemToCart(state.cartItems, action.payload), // prasing everything we had before in ...state.cartItem, and add new item as action.payload in the end of the array\n      };\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(\n          (cartItem) => cartItem.id !== action.payload.id,\n        ),\n      };\n    case CartActionTypes.REDUCE_ITEM:\n      return {\n        ...state,\n        cartItems: reduceItemQuantity(state.cartItems, action.payload),\n      };\n    case CartActionTypes.CLEAR_CART:\n      return {\n        ...state,\n        cartItems: [],\n      };\n    default:\n      return state;\n  }\n};\nexport default cartReducer;\n"]},"metadata":{},"sourceType":"module"}