{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/filrebase.util';\nexport const fetchCollectionStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTION_START\n});\nexport const fetchCollectionSuccess = collectionMap => ({\n  type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n  payload: collectionMap\n});\nexport const fetchCollectionFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionStartAsync = () => dispatch => {\n  const collectionRef = firestore.collection('collections'); // 从firestore里把整个collection的ref拿出来,\n\n  dispatch(fetchCollectionStart()); // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async (Snapshot) => {\n  //   const collectionMap = convertCollectionsSnapShotToMap(Snapshot);\n  //   updateCollections(collectionMap); // 这里是async, 需要等待的,接到信息了update到redux里头去\n  //   this.setState({ loading: false });\n  // }); //= > this means whenever collectionSnapshot got update, or run first time this will send collection data arry to us\n\n  collectionRef.get().then(Snapshot => {\n    // 这个是标准格式,上面那个是firebase提供的方法 m m m m\n    const collectionMap = convertCollectionsSnapShotToMap(Snapshot);\n    dispatch(fetchCollectionSuccess(collectionMap));\n  }).catch(error => dispatch(fetchCollectionFailure(error.Message)));\n};\nexport default fetchCollectionStartAsync;","map":{"version":3,"sources":["/Users/lihaohang/github/react-practice-app/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapShotToMap","fetchCollectionStart","type","FETCH_COLLECTION_START","fetchCollectionSuccess","collectionMap","FETCH_COLLECTION_SUCCESS","payload","fetchCollectionFailure","errorMessage","FETCH_COLLECTION_FAILURE","fetchCollectionStartAsync","dispatch","collectionRef","collection","get","then","Snapshot","catch","error","Message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,oBAAoB,GAAG,OAAO;AACzCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADmB,CAAP,CAA7B;AAIP,OAAO,MAAMC,sBAAsB,GAAIC,aAAD,KAAoB;AACxDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,wBADkC;AAExDC,EAAAA,OAAO,EAAEF;AAF+C,CAApB,CAA/B;AAKP,OAAO,MAAMG,sBAAsB,GAAIC,YAAD,KAAmB;AACvDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,wBADiC;AAEvDH,EAAAA,OAAO,EAAEE;AAF8C,CAAnB,CAA/B;AAIP,OAAO,MAAME,yBAAyB,GAAG,MAAOC,QAAD,IAAc;AAC3D,QAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CAD2D,CACA;;AAC3DF,EAAAA,QAAQ,CAACX,oBAAoB,EAArB,CAAR,CAF2D,CAG3D;AACA;AACA;AACA;AACA;;AACAY,EAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAAE;AACpB,UAAMZ,aAAa,GAAGL,+BAA+B,CAACiB,QAAD,CAArD;AACAL,IAAAA,QAAQ,CAACR,sBAAsB,CAACC,aAAD,CAAvB,CAAR;AACD,GALH,EAMGa,KANH,CAMUC,KAAD,IAAWP,QAAQ,CAACJ,sBAAsB,CAACW,KAAK,CAACC,OAAP,CAAvB,CAN5B;AAOD,CAfM;AAiBP,eAAeT,yBAAf","sourcesContent":["import ShopActionTypes from './shop.types';\n\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/filrebase.util';\n\nexport const fetchCollectionStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTION_START,\n\n});\nexport const fetchCollectionSuccess = (collectionMap) => ({\n  type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n  payload: collectionMap,\n});\n\nexport const fetchCollectionFailure = (errorMessage) => ({\n  type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\n  payload: errorMessage,\n});\nexport const fetchCollectionStartAsync = () => (dispatch) => {\n  const collectionRef = firestore.collection('collections'); // 从firestore里把整个collection的ref拿出来,\n  dispatch(fetchCollectionStart());\n  // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async (Snapshot) => {\n  //   const collectionMap = convertCollectionsSnapShotToMap(Snapshot);\n  //   updateCollections(collectionMap); // 这里是async, 需要等待的,接到信息了update到redux里头去\n  //   this.setState({ loading: false });\n  // }); //= > this means whenever collectionSnapshot got update, or run first time this will send collection data arry to us\n  collectionRef\n    .get()\n    .then((Snapshot) => { // 这个是标准格式,上面那个是firebase提供的方法 m m m m\n      const collectionMap = convertCollectionsSnapShotToMap(Snapshot);\n      dispatch(fetchCollectionSuccess(collectionMap));\n    })\n    .catch((error) => dispatch(fetchCollectionFailure(error.Message)));\n};\n\nexport default fetchCollectionStartAsync;\n"]},"metadata":{},"sourceType":"module"}